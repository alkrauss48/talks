Accessibility for the Web

(From a developer's perspective)

By:
     Aaron Krauss

\@thecodeboss

@images/clevyr.png

@images/techlahoma.png

@images/code-org.png

https://code.org/volunteer

Disclaimer

Some of this talk will be
more dev than you care about

Deal with it

Developer Code of Ethics
When working with a Designer

1) Even if you don't have to - or
even want to - you always must
deviate from the original design.

2) At least once, say "we can't do that",
or even better, "I'm not going to do that."

3) Get the project 90% close to the original
design. After that, just say everything will
take too much time - even if it won't.

4) Never admit that you don't know something
- just say it's impossible, even if there
are plenty of websites that already do it.

Developer Code of Ethics
When working with a Designer

What is Accessibility?

a11y

Accessibility is giving a f*ck about people

All people

That includes users with disabilities

And also users with no disabilities at all

Main Concept

Building an accessible web site
makes your website better overall

* Better design architecture
* Better code architecture
* More quality content
* Better SEO
* More usage (and thus popularity)

And all of that usually means more $$$

@images/make-money.png

Developing an accessibile site
may also be required

Section 508

Some housekeeping...

Don't say "disabled users"

Say "users with disabilities"

Myth Busing Time

Myth #1

Accessibility = handling blind users

Wrong

Accessibility = handling everyone

Myth #2

Accessibility = people use screen readers,
so add image alt text

Wrong

Accessibility = a ton of stuff

But it's okay...

@images/we-can-do-this.png

Types of Disabilities

* Visual
* Auditory
* Motor
* Cognitive

Followed by a bonus disability

Visual Concerns

* Screen readers
* Color-blindness
* Contrast
* Z-scan
* Open Graph

Screen readers

ChromeVox

Accessibility tree

@images/accessibility-tree.png

Accessibility tree vs DOM tree

Tips for maximizing screen reader usage:

* Use Semantic HTML
  * Such as <section>,<article>,
    <aside>,<nav>, etc.

* Image alt tags

* Title tags for non-image icons

* ARIA properties

Accessible Rich
Internet Applications

You can help by:
* Telling the developer what an image's alt text should be
* Ensuring the developer knows how everything interacts

Color-blindness

NoCoffee Chrome Plugin

Contrast

@images/contrast.png

Z-scan

Users donâ€™t read web pages,
they scan.

@images/z-scan.png

Open Graph

Auditory Concerns

For Media:

* Subtitles
* Volume controls
* Ideally default to a "muted" state

For supplemental audio:

* Visual cues
* Nothing absurd (i.e. loud, lengthy, confusing)

Motor Concerns

* Responsive Applications
* Skip menus
* Tab flow
* Focus indicators
* "Submit" actions
* "Cancel" actions

Responsive Applications

@images/responsive.png

Skip menus

Tab flow

Focus indicators

"Submit" actions

e.g. the Enter or Spacebar key

@images/modal.png

"Cancel" actions

e.g. the ESC key

@images/modal.png

Cognitive Concerns

* Good content
* Well-thought-out workflows
* "Panic" mode

Good Content

* Labels
* Titles / Headings
* Call to Actions

Well thought-out workflows

* Analyze multiple users' perspectives
* Build wireframes (and give them to the dev)

"Panic" mode

Think websites like:
* Hospitals
* Schools
* Local News / Weather

Make a few things incredibly simple

Bonus Disability

Drum Roll...

"Data" Disability

Not all users have a ton of data,
let alone fast connections

Especially in other countries

So what can you do?

* Optimize your images

@images/super-mario.png

* 150-200 KB is usually my limit.
Ideally less than that.

* Minify your CSS and JS

* Don't overdo it on custom fonts

* Set caching HTTP headers

Want to learn more?

1) Watch this talk like 2 more
times when it gets up on YouTube

2) Then follow the references

3) Then google things

References

* Section 508: https://www.epa.gov/accessibility/what-section-508
* ChromeVox Plugin: https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn?hl=en
* Developing for Accessibility: https://thecodeboss.dev/2014/07/developing-for-accessibility/
* ARIA Roles and Attributes: https://thecodeboss.dev/2016/09/aria-roles-and-attributes-how-to-actually-use-them/
* NoCoffee Chrome Plugin: https://chrome.google.com/webstore/detail/nocoffee/jjeeggmbnhckmgdhmgdckeigabjfbddl?hl=en-US
* Open Graph: https://thecodeboss.dev/2016/12/what-meta-tags-your-site-should-be-using/
* Contrast Test: https://webaim.org/resources/contrastchecker/
* Z-Scan: https://uxplanet.org/z-shaped-pattern-for-reading-web-content-ce1135f92f1c
* Meta Tags: https://thecodeboss.dev/2016/12/what-meta-tags-your-site-should-be-using/
* Skip Menu Code: https://gist.github.com/alkrauss48/dc8e010a59d5e2df1666

thanks

clevyr
clevyr.com

* @thecodeboss
* thecodeboss.dev

questions?
