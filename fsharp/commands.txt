fsharpi                            (starts F# interactive)
fsharpc file.fs                    (F# compiler)
xbuild                             (builds .fsproj projects and .sln files)
mono file.exe arg1 ... argN        (runs a compiled F# program)
mkbundle --static file.exe -o file (makes a static native image, including the F# runtime)

// Foo is a binding
let foo = 20;;

foo <- 10;; // Error

( <- is the assignment operator )

You can do shadowing though:
let foo = 20;;
let foo = 10;;

let mutable foo = 20;;

foo <- 10;;

// import script into repl:
#load "./code/add.fs";;
open Add


mcs -target:library -out:build/arith.dll demos/arith.cs

fsharpi

#r "../build/arith.dll"
let arith = MyMath.Arith()
let x = arith.Add(10, 20)

Pipe-forward operator (|>)

Pipe-forward operator lets you pass an intermediate result onto the next
function

Map function:
map is the name of a higher-order function that applies a given function to
each element of a list, returning a list of results in the same order. It is
often called apply-to-all when considered in functional form.

fsharpc demos/map.fs --out:build/map.exe

Filter function:
filter is a higher-order function that processes a data structure (usually a
list) in some order to produce a new data structure containing exactly those
elements of the original data structure for which a given predicate returns the
boolean value true.

fsharpc demos/filter.fs --out:build/filter.exe

Fold/Reduce/Inject function:
fold (also termed reduce, accumulate, aggregate, compress, or inject) refers to a
family of higher-order functions that analyze a recursive data structure and
through use of a given combining operation, recombine the results of recursively
processing its constituent parts, building up a return value.

fsharpc demos/fold.fs --out:build/fold.exe

fsharpc demos/async.fs --out:build/async.exe
